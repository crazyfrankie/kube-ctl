// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/crazyfrankie/kube-ctl/docs"
	"github.com/crazyfrankie/kube-ctl/internal/api/k8s"
	"github.com/crazyfrankie/kube-ctl/internal/api/mw"
	"github.com/crazyfrankie/kube-ctl/internal/service"
	"github.com/gin-gonic/gin"
	"github.com/swaggo/files"
	"github.com/swaggo/gin-swagger"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/clientcmd"
)

// Injectors from wire.go:

func InitServer() *gin.Engine {
	v := InitMws()
	clientset := InitKubernetes()
	podService := service.NewPodService(clientset)
	podHandler := k8s.NewPodHandler(podService)
	nodeService := service.NewNodeService(clientset)
	nodeHandler := k8s.NewNodeHandler(nodeService)
	configMapService := service.NewConfigMapService(clientset)
	configMapHandler := k8s.NewConfigMapHandler(configMapService)
	secretService := service.NewSecretService(clientset)
	secretHandler := k8s.NewSecretHandler(secretService)
	pvService := service.NewPVService(clientset)
	pvHandler := k8s.NewPVHandler(pvService)
	pvcService := service.NewPVCService(clientset)
	pvcHandler := k8s.NewPVCHandler(pvcService)
	storageClassService := service.NewStorageClassService(clientset)
	storageClassHandler := k8s.NewStorageClassHandler(storageClassService)
	svcService := service.NewServiceService(clientset)
	serviceHandler := k8s.NewServiceHandler(svcService)
	engine := InitGin(v, podHandler, nodeHandler, configMapHandler, secretHandler, pvHandler, pvcHandler, storageClassHandler, serviceHandler)
	return engine
}

// wire.go:

func InitKubernetes() *kubernetes.Clientset {
	kubeConfig := ".kube/config"

	config, err := clientcmd.BuildConfigFromFlags("", kubeConfig)
	if err != nil {
		panic(err.Error())
	}

	clientSet, err := kubernetes.NewForConfig(config)
	if err != nil {
		panic(err.Error())
	}

	return clientSet
}

func InitMws() []gin.HandlerFunc {
	return []gin.HandlerFunc{mw.CORS()}
}

func InitGin(mws []gin.HandlerFunc, pod *k8s.PodHandler, node *k8s.NodeHandler,
	configmap *k8s.ConfigMapHandler, secret *k8s.SecretHandler, pv *k8s.PVHandler,
	pvc *k8s.PVCHandler, storage *k8s.StorageClassHandler,
	svc *k8s.ServiceHandler) *gin.Engine {
	srv := gin.Default()
	srv.Use(mws...)

	pod.RegisterRoute(srv)
	node.RegisterRoute(srv)
	configmap.RegisterRoute(srv)
	secret.RegisterRoute(srv)
	pv.RegisterRoute(srv)
	pvc.RegisterRoute(srv)
	storage.RegisterRoute(srv)
	svc.RegisterRoute(srv)

	srv.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	docs.SwaggerInfo.
		BasePath = "/api"

	return srv
}
